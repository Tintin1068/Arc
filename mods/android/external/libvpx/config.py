# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

import make_to_ninja
import ninja_generator
import staging
import toolchain
from build_options import OPTIONS


_ADS2GAS = staging.as_staging(
    'android/external/libvpx/libvpx/build/make/ads2gas.pl')
_GEN_LIBVPX_ASM_RULE = 'gen_libvpx_asm'
_GEN_LIBVPX_OFFSETS_ASM_RULE = 'gen_libvpx_offsets_asm'


def _get_generate_libvpx_asm_ninja():
  if not OPTIONS.is_arm():
    return None

  gen_asm_ninja = ninja_generator.NinjaGenerator('libvpx_asm')
  # Translate RVCT format assembly code into GNU Assembler format.
  gen_asm_ninja.rule(
      _GEN_LIBVPX_ASM_RULE,
      command=_ADS2GAS + ' < $in > $out.tmp && (mv $out.tmp $out)')

  # Translate C source code into assembly code and run grep to
  # generate a list of constants. Assembly code generated by this rule
  # will be included from other assembly code. See
  # third_party/android/external/libvpx/libvpx.mk for corresponding
  # rules written in Makefile.
  asm_include_paths = [
      '-I' + staging.as_staging('android/external/libvpx/armv7a-neon'),
      '-I' + staging.as_staging('android/external/libvpx/libvpx')]
  gen_asm_ninja.rule(
      _GEN_LIBVPX_OFFSETS_ASM_RULE,
      command=('%s -DINLINE_ASM %s -S $in -o $out.s && '
               'grep \'^[a-zA-Z0-9_]* EQU\' $out.s | '
               'tr -d \'$$\\#\' | '
               '%s > $out.tmp && (mv $out.tmp $out)' % (
                   toolchain.get_tool(OPTIONS.target(), 'cc'),
                   ' '.join(asm_include_paths),
                   _ADS2GAS)))

  return gen_asm_ninja


def _filter_libvpx(vars, gen_asm_ninja):
  # They only have some definitions of constants, and are meant to be
  # included from other assembly code, so we do not need to compile
  # them.
  offset_asms = ['vp8/encoder/vp8_asm_enc_offsets.asm',
                 'vpx_scale/vpx_scale_asm_offsets.asm']
  for remove in offset_asms:
    match = [m for m in vars.get_sources() if remove in m]
    for m in match:
      vars.get_sources().remove(m)

  if OPTIONS.is_arm():
    # Build the 'offsets' assembly files.
    generated_offset_asms = []
    for offset_asm in offset_asms:
      generated_offset_asm_dir = os.path.join(vars.get_android_gen_path(),
                                              os.path.dirname(offset_asm),
                                              'arm/neon')
      # The generated assembly code will be included from other
      # files. Here we pass the appropriate include path.
      vars.get_cflags().append('-Wa,-I' + generated_offset_asm_dir)
      generated_offset_asm = os.path.join(generated_offset_asm_dir,
                                          os.path.basename(offset_asm))
      gen_asm_ninja.build(
          generated_offset_asm,
          _GEN_LIBVPX_OFFSETS_ASM_RULE,
          staging.as_staging(os.path.join('android/external/libvpx/libvpx',
                                          offset_asm.replace('.asm', '.c'))),
          implicit=[_ADS2GAS])
      generated_offset_asms.append(generated_offset_asm)

    # Translate RVCT format to GNU Assembler format.
    for f in filter(lambda f: '/arm/' in f, vars.get_sources()):
      if f.endswith('.asm.s'):
        assert f.startswith(vars.get_android_gen_path())
        source = f.replace(
            vars.get_android_gen_path(),
            staging.as_staging('android/external/libvpx/libvpx'))
        source = source.replace('.asm.s', '.asm')
        # We manually set generated_offset_asms as their implicit
        # dependencies because our 'asm' compiler rule does not
        # support ninja's 'deps' attribute.
        gen_asm_ninja.build(f, _GEN_LIBVPX_ASM_RULE, source,
                            implicit=[_ADS2GAS] + generated_offset_asms)
  else:
    # TODO(crbug.com/263712): Enable assembly code in libvpx for Bare
    # Metal i686.
    assert not gen_asm_ninja

  # libvpx is used by libstagefright, libstagefright_soft_vpxdec and
  # libwebviewchromium, hence 3 instances.
  vars.set_instances_count(3)
  return True


def generate_ninjas():
  gen_asm_ninja = _get_generate_libvpx_asm_ninja()

  def _filter(vars):
    if vars.get_module_name() not in ['libvpx', 'libwebm']:
      return False
    if vars.get_module_name() == 'libvpx':
      return _filter_libvpx(vars, gen_asm_ninja)
    return True
  make_to_ninja.MakefileNinjaTranslator('android/external/libvpx').generate(
      _filter)
